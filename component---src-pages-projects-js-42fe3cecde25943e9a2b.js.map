{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/Styled.js","webpack:///./src/constants/Colors.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["ProjectList","styled","div","withConfig","displayName","componentId","ProjectItemBox","ProjectHeader","NameTitle","_ref","name","owner","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_StyledSpan","_css","colors","MediumGrey","login","_StyledSpan2","_css2","Black","Project","_ref2","description","url","key","_components_Styled__WEBPACK_IMPORTED_MODULE_7__","href","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__","icon","faGithub","ProjectsPage","_ref3","repos","data","github","user","pinnedItems","nodes","_components_layout__WEBPACK_IMPORTED_MODULE_5__","_components_seo__WEBPACK_IMPORTED_MODULE_6__","title","map","to","query","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","m","module","exports","require","default","Link","Anchor","styled_components__WEBPACK_IMPORTED_MODULE_1__","_constants_Colors__WEBPACK_IMPORTED_MODULE_2__","gatsby__WEBPACK_IMPORTED_MODULE_3__","GatsbyLink","Colors","DarkGrey","Math","random","Accent","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","NavBox","NavItem","pages","link","external","NavBar","react_default","page","Styled","Header","header","header_NavBar","Layout","children","_856328897","Fragment","style","margin","maxWidth","padding","paddingTop"],"mappings":"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","file":"component---src-pages-projects-js-42fe3cecde25943e9a2b.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { Anchor, Link } from \"../components/Styled\"\nimport colors from \"../constants/Colors\";\n\nconst ProjectList = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst ProjectItemBox = styled.div`\n  width: 100%;\n  // border: 1px solid black;\n  padding: 1em;\n  margin: 0 0 1em;\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.2);\n`\n\n// const IconLinkTray = styled.div``\n\nconst ProjectHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 1.4rem;\n`\n\n\nconst NameTitle = ({ name, owner }) => {\n  return (\n    <span>\n      <span css={`color: ${colors.MediumGrey}`}>\n        {/* <Anchor css={`color: ${colors.MediumGrey}`} href={owner.url}>{owner.login}{` / `}</Anchor> */}\n        {owner.login}{` / `}\n      </span>\n      <span css={`color: ${colors.Black}`}>{name}</span>\n    </span>\n  )\n}\n\n\nconst Project = ({ owner, name, description, url}) => {\n  return (\n    <ProjectItemBox key={name}>\n      <ProjectHeader>\n        <NameTitle name={name} owner={owner} />\n        <Anchor href={url}><FontAwesomeIcon icon={faGithub}/></Anchor>\n      </ProjectHeader>\n      <p>{description}</p>\n    </ProjectItemBox>\n  )\n}\n\nconst ProjectsPage = ({ data }) => {\n  const repos = data.github.user.pinnedItems.nodes\n\n  return (\n    <Layout>\n      <SEO title=\"Projects | Zoravur Singh\" />\n      <h2>Projects</h2>\n      <p>Here are some things that I've done.</p>\n      <ProjectList>\n        {repos.map(Project)}\n      </ProjectList>\n      <Link to=\"/\">Go back to the homepage</Link>\n    </Layout>\n  )\n}\n\nexport default ProjectsPage\n\nexport const query = graphql`\n  query ProjectsQuery {\n    github {\n      user(login: \"ZorvyY\") {\n        pinnedItems(first: 10) {\n          nodes {\n            ... on GitHub_Repository {\n              owner {\n                url\n                login\n              }\n              name\n              description\n              url\n            }\n          }\n          pageInfo {\n            endCursor\n            startCursor\n          }\n        }\n      }\n    }\n  }\n`","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nimport Colors from \"../constants/Colors\"\n\nimport { Link as GatsbyLink } from \"gatsby\"\nexport const Link = styled(GatsbyLink)`\n  text-decoration: none;\n  color: ${Colors.DarkGrey};\n\n  :hover {\n    color: ${() => `hsl(${360 * Math.random() | 0}, 100%, 50%)`};\n  }\n`\n\nexport const Anchor = styled.a`\n  text-decoration: none;\n  color: ${Colors.DarkGrey};\n\n  :hover {\n    color: ${() => `hsl(${360 * Math.random() | 0}, 100%, 50%)`};\n  }\n`","const Colors = {\n  MediumGrey: '#999999',\n  DarkGrey: '#444444',\n  Black: '#000000',\n  Accent: '#00a',\n}\n\nexport default Colors","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport styled from 'styled-components'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nimport { Link, Anchor } from \"./Styled\"\n\nconst NavBox = styled.div`\n  width: 100%;\n  display: flex;\n  padding: 1em 0;\n`\n\nconst NavItem = styled.div`\n  width: 10ch;\n`\n\nconst pages = [\n  {\n    name: 'Home',\n    link: '/',\n  },\n  {\n    name: 'About',\n    link: '/about',\n  },\n  {\n    name: 'Projects',\n    link: '/projects',\n  },\n  {\n    name: 'Resume',\n    link: '/resume.pdf',\n    external: 'true',\n  }\n]\n\nconst NavBar = ({pages}) => {\n  return (\n    <NavBox>\n      {pages.map(page => {\n        return (\n          <NavItem key={page.name}>\n            {page.external ? \n              <Anchor href={page.link}>{page.name}</Anchor> :\n              <Link to={page.link}>{page.name}</Link>\n            }\n          </NavItem>\n        )\n      })}\n    </NavBox>\n  )\n}\n\nconst Header = styled.div`\n  margin-bottom: 1em;\n`\n\nexport default () => <Header><NavBar pages={pages}/></Header>;","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <Header />\n        <main>\n          {children}\n        </main>\n        <footer>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}