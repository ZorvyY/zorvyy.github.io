{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/constants/Colors.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/Styled.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/Navigation.js","webpack:///./src/components/Social.js","webpack:///./src/components/Header.js","webpack:///./src/components/layout.js"],"names":["ProjectList","styled","div","withConfig","displayName","componentId","ProjectItemBox","ProjectHeader","NameTitle","_ref","name","owner","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_StyledSpan","_css","colors","MediumGrey","login","_StyledSpan2","_css2","Black","Project","_ref2","description","url","key","_components_Styled__WEBPACK_IMPORTED_MODULE_7__","to","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_3__","icon","faGithub","ProjectsPage","_ref3","repos","data","github","user","pinnedItems","nodes","_components_layout__WEBPACK_IMPORTED_MODULE_5__","_components_seo__WEBPACK_IMPORTED_MODULE_6__","title","map","query","Colors","DarkGrey","DarkerGrey","Accent","loader","enqueue","React","createContext","UnstyledLink","props","startsWith","external","rest","_objectWithoutPropertiesLoose","react_default","Object","assign","href","gatsby_link_default","Link","IconLink","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","json","SEO","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps","NavBox","NavItem","NavLink","active","NavBar","pages","es","activePage","pathname","page","link","Navigation","Navigation_NavBar","IconTray","Social","socials","social","_StyledDiv","Styled","index_es","faLinkedin","faCodepen","components_Social","Social_Social","HeaderSection","HeaderContainer","Header","width","Layout","children","_856328897","console","log","Fragment","style","margin","maxWidth","padding","paddingTop","components_Header"],"mappings":"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","file":"component---src-pages-projects-js-33fb2f8cd16032475975.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { IconLink } from \"../components/Styled\"\nimport colors from \"../constants/Colors\";\n\nconst ProjectList = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst ProjectItemBox = styled.div`\n  width: 100%;\n  // border: 1px solid black;\n  padding: 1em;\n  margin: 0 0 1em;\n  box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.2);\n`\n\nconst ProjectHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 1.4rem;\n`\n\n\nconst NameTitle = ({ name, owner }) => {\n  return (\n    <span>\n      <span css={`color: ${colors.MediumGrey}`}>\n        {owner.login}{` / `}\n      </span>\n      <span css={`color: ${colors.Black}`}>{name}</span>\n    </span>\n  )\n}\n\n\nconst Project = ({ owner, name, description, url}) => {\n  return (\n    <ProjectItemBox key={name}>\n      <ProjectHeader>\n        <NameTitle name={name} owner={owner} />\n        <IconLink to={url}><FontAwesomeIcon icon={faGithub}/></IconLink>\n      </ProjectHeader>\n      <p>{description}</p>\n    </ProjectItemBox>\n  )\n}\n\nconst ProjectsPage = ({ data }) => {\n  const repos = data.github.user.pinnedItems.nodes\n\n  return (\n    <Layout>\n      <SEO title=\"Projects\" />\n      <h2>Projects</h2>\n      <p>Here are some things that I've done.</p>\n      <ProjectList>\n        {repos.map(Project)}\n      </ProjectList>\n    </Layout>\n  )\n}\n\nexport default ProjectsPage\n\nexport const query = graphql`\n  query ProjectsQuery {\n    github {\n      user(login: \"ZorvyY\") {\n        pinnedItems(first: 10) {\n          nodes {\n            ... on GitHub_Repository {\n              owner {\n                url\n                login\n              }\n              name\n              description\n              url\n            }\n          }\n          pageInfo {\n            endCursor\n            startCursor\n          }\n        }\n      }\n    }\n  }\n`","const Colors = {\n  MediumGrey: '#999999',\n  DarkGrey: '#444444',\n  DarkerGrey: '#111',\n  Black: '#000000',\n  Accent: '#e94d38',\n}\n\nexport default Colors","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nimport Colors from \"../constants/Colors\"\n\nimport { Link as GatsbyLink } from \"gatsby\"\n\nexport const UnstyledLink = props => {\n  if (props.to.startsWith('http') || props.external) {\n    const { to, external, ...rest } = props\n    return <a href={to} {...rest} /> \n  } else {\n    const { external, ...rest } = props\n    return <GatsbyLink {...rest} />\n  }\n} \n\nexport const Link = styled(UnstyledLink)`\n  text-decoration: none;\n  color: ${Colors.DarkGrey};\n  position: relative;\n\n  :hover {\n    :after { \n      width: 100%; \n      left: 0; \n    }\n  }\n\n  :after {    \n    background: none repeat scroll 0 0 transparent;\n    bottom: 0;\n    content: \"\";\n    display: block;\n    height: 2px;\n    left: 50%;\n    position: absolute;\n    background: ${Colors.Accent};\n    transition: width 0.3s ease 0s, left 0.3s ease 0s;\n    width: 0;\n  }\n`\n\nexport const IconLink = styled(UnstyledLink)`\n  text-decoration: none;\n  color: ${Colors.DarkGrey};\n  transition: color 200ms;\n\n  :hover {\n    color: ${Colors.Accent};\n  }\n`","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport styled from 'styled-components'\nimport { Location } from '@reach/router'\n\nimport { Link } from './Styled'\nimport Colors from '../constants/Colors'\n\nconst NavBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n`\n\nconst NavItem = styled.div`\n  text-transform: uppercase;\n`\n\nconst NavLink = styled(Link)`\n  font-family: Oswald; \n\n  ${props => props.active ? `\n    color: ${Colors.Accent}\n    :after {\n      background: ${Colors.DarkGrey}\n    }\n\n  ` : ''}\n`\n\nconst NavBar = ({ pages }) => {\n  return (\n    <NavBox>\n      <Location>\n        {({ location } ) => {\n          let activePage = location.pathname\n\n          return pages.map(page => {\n            return (\n              <NavItem key={page.name}>\n                  <NavLink to={page.link} active={activePage===page.link} external={page.external}>\n                    <span css={`font-family: Oswald;`}>{page.name}</span>\n                  </NavLink>\n              </NavItem>\n            )\n          })\n        }}\n      </Location>\n\n    </NavBox>\n  )\n}\n\nconst pages = [\n  {\n    name: 'Home',\n    link: '/',\n  },\n  {\n    name: 'About',\n    link: '/about/',\n  },\n  {\n    name: 'Projects',\n    link: '/projects/',\n  },\n  {\n    name: 'Resume',\n    link: '/resume.pdf',\n    external: 'true',\n  },\n]\n\nexport default () => <NavBar pages={pages} />","import React from 'react'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub, faLinkedin, faCodepen } from '@fortawesome/free-brands-svg-icons'\n\nimport { IconLink } from './Styled'\n\nconst IconTray = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n`\n\nconst Social = ({ socials }) => {\n  return (\n    <IconTray>\n      {socials.map(social => {\n        return (\n          <div css='padding: 0 0.5ch;' key={social.link}>\n            <IconLink to={social.link}><FontAwesomeIcon icon={social.icon} /></IconLink>\n          </div>\n        )\n      })}\n    </IconTray>\n  )\n}\n\nconst socials = [\n  {\n    link: 'https://github.com/ZorvyY',\n    icon: faGithub,\n  },\n  {\n    link: 'https://linkedin.com/in/zoravur-singh',\n    icon: faLinkedin,\n  },\n  {\n    link: 'https://codepen.io/ZorvyY',\n    icon: faCodepen,\n  }\n]\n\nexport default () => <Social socials={socials} />","import React from \"react\"\nimport styled from 'styled-components'\n// import { useStaticQuery, graphql } from 'gatsby'\n\nimport Navigation from './Navigation'\nimport Social from './Social'\n// import logoSrc from \"../assets/icons/logo-lettering-bold.svg\"\n// import Fonts from \"../constants/Fonts\"\n\n\nconst HeaderSection = styled.div`\n  flex-grow: 1;\n  font-size: 1.2em;\n`\n\nconst HeaderContainer = styled.div`\n  margin-bottom: 1em;\n  display: flex;\n  justify-content: space-between;\n  padding: 1em 0;\n`\n\nconst Header = () => {\n  return (\n    <HeaderContainer>\n      <HeaderSection width='80%'>\n        <Navigation />\n      </HeaderSection>\n      <HeaderSection width='20%'>\n        <Social />\n      </HeaderSection>\n    </HeaderContainer>\n  )\n}\n\n\n\n\nexport default Header;","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./Header\"\nimport './layout.css'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  console.log(data.site.siteMetadata.title)\n\n  return (\n    <>\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <Header />\n        <main>\n          {children}\n        </main>\n        <footer>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}